// Code Generated By gen-enumer For "Enum Type: SdOperationStatus" - DO NOT EDIT;

/*
 * Copyright 2020-2023 Aldelo, LP
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sdoperationstatus

import (
	"fmt"
	"strconv"
)

// enum names constants
const (
	_SdOperationStatusName_0 = "UNKNOWN"
	_SdOperationStatusName_1 = "Submitted"
	_SdOperationStatusName_2 = "Pending"
	_SdOperationStatusName_3 = "Success"
	_SdOperationStatusName_4 = "Fail"
)

// var declares of enum indexes
var (
	_SdOperationStatusIndex_0 = [...]uint8{0, 7}
	_SdOperationStatusIndex_1 = [...]uint8{0, 9}
	_SdOperationStatusIndex_2 = [...]uint8{0, 7}
	_SdOperationStatusIndex_3 = [...]uint8{0, 7}
	_SdOperationStatusIndex_4 = [...]uint8{0, 4}
)

func (i SdOperationStatus) String() string {
	switch {
	case i == UNKNOWN:
		return _SdOperationStatusName_0
	case i == Submitted:
		return _SdOperationStatusName_1
	case i == Pending:
		return _SdOperationStatusName_2
	case i == Success:
		return _SdOperationStatusName_3
	case i == Fail:
		return _SdOperationStatusName_4
	default:
		return ""
	}
}

var _SdOperationStatusValues = []SdOperationStatus{
	0, // UNKNOWN
	1, // Submitted
	2, // Pending
	3, // Success
	4, // Fail
}

var _SdOperationStatusNameToValueMap = map[string]SdOperationStatus{
	_SdOperationStatusName_0[0:7]: 0, // UNKNOWN
	_SdOperationStatusName_1[0:9]: 1, // Submitted
	_SdOperationStatusName_2[0:7]: 2, // Pending
	_SdOperationStatusName_3[0:7]: 3, // Success
	_SdOperationStatusName_4[0:4]: 4, // Fail
}

var _SdOperationStatusValueToKeyMap = map[SdOperationStatus]string{
	0: _SdOperationStatusKey_0, // UNKNOWN
	1: _SdOperationStatusKey_1, // Submitted
	2: _SdOperationStatusKey_2, // Pending
	3: _SdOperationStatusKey_3, // Success
	4: _SdOperationStatusKey_4, // Fail
}

var _SdOperationStatusValueToCaptionMap = map[SdOperationStatus]string{
	0: _SdOperationStatusCaption_0, // UNKNOWN
	1: _SdOperationStatusCaption_1, // Submitted
	2: _SdOperationStatusCaption_2, // Pending
	3: _SdOperationStatusCaption_3, // Success
	4: _SdOperationStatusCaption_4, // Fail
}

var _SdOperationStatusValueToDescriptionMap = map[SdOperationStatus]string{
	0: _SdOperationStatusDescription_0, // UNKNOWN
	1: _SdOperationStatusDescription_1, // Submitted
	2: _SdOperationStatusDescription_2, // Pending
	3: _SdOperationStatusDescription_3, // Success
	4: _SdOperationStatusDescription_4, // Fail
}

// Valid returns 'true' if the value is listed in the SdOperationStatus enum map definition, 'false' otherwise
func (i SdOperationStatus) Valid() bool {
	for _, v := range _SdOperationStatusValues {
		if i == v {
			return true
		}
	}

	return false
}

// ParseByName retrieves a SdOperationStatus enum value from the enum string name,
// throws an error if the param is not part of the enum
func (i SdOperationStatus) ParseByName(s string) (SdOperationStatus, error) {
	if val, ok := _SdOperationStatusNameToValueMap[s]; ok {
		// parse ok
		return val, nil
	}

	// error
	return -1, fmt.Errorf("Enum Name of %s Not Expected In SdOperationStatus Values List", s)
}

// ParseByKey retrieves a SdOperationStatus enum value from the enum string key,
// throws an error if the param is not part of the enum
func (i SdOperationStatus) ParseByKey(s string) (SdOperationStatus, error) {
	for k, v := range _SdOperationStatusValueToKeyMap {
		if v == s {
			// parse ok
			return k, nil
		}
	}

	// error
	return -1, fmt.Errorf("Enum Key of %s Not Expected In SdOperationStatus Keys List", s)
}

// Key retrieves a SdOperationStatus enum string key
func (i SdOperationStatus) Key() string {
	if val, ok := _SdOperationStatusValueToKeyMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Caption retrieves a SdOperationStatus enum string caption
func (i SdOperationStatus) Caption() string {
	if val, ok := _SdOperationStatusValueToCaptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Description retrieves a SdOperationStatus enum string description
func (i SdOperationStatus) Description() string {
	if val, ok := _SdOperationStatusValueToDescriptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// IntValue gets the intrinsic enum integer value
func (i SdOperationStatus) IntValue() int {
	return int(i)
}

// IntString gets the intrinsic enum integer value represented in string format
func (i SdOperationStatus) IntString() string {
	return strconv.Itoa(int(i))
}

// ValueSlice returns all values of the enum SdOperationStatus in a slice
func (i SdOperationStatus) ValueSlice() []SdOperationStatus {
	return _SdOperationStatusValues
}

// NameMap returns all names of the enum SdOperationStatus in a K:name,V:SdOperationStatus map
func (i SdOperationStatus) NameMap() map[string]SdOperationStatus {
	return _SdOperationStatusNameToValueMap
}

// KeyMap returns all keys of the enum SdOperationStatus in a K:SdOperationStatus,V:key map
func (i SdOperationStatus) KeyMap() map[SdOperationStatus]string {
	return _SdOperationStatusValueToKeyMap
}

// CaptionMap returns all captions of the enum SdOperationStatus in a K:SdOperationStatus,V:caption map
func (i SdOperationStatus) CaptionMap() map[SdOperationStatus]string {
	return _SdOperationStatusValueToCaptionMap
}

// DescriptionMap returns all descriptions of the enum SdOperationStatus in a K:SdOperationStatus,V:description map
func (i SdOperationStatus) DescriptionMap() map[SdOperationStatus]string {
	return _SdOperationStatusValueToDescriptionMap
}
